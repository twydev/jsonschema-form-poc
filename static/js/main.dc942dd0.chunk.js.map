{"version":3,"sources":["jsonschema.js","uischema.js","App.js","serviceWorker.js","index.js"],"names":["jsonSchema","uiSchema","ReturnArray","props","state","formData","options","schema","properties","productItem","enum","handleProduct","bind","handleQuantity","console","log","event","stateQuantity","this","productQuantity","value","__isNew__","setState","label","onChange","stateItem","parseInt","target","className","defaultValue","style","paddingLeft","paddingTop","type","placeholder","React","Component","App","handleChange","handleSubmit","Date","toISOString","fields","selectProduct","Object","assign","process","JSON","stringify","undefined","safeRenderCompletion","formContext","onSubmit","Boolean","window","location","hostname","match","ReactDOM","render","basename","exact","path","routerProps","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc942dd0.chunk.js","sourcesContent":["const jsonSchema = {\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"returnForm\": {\r\n      \"title\": \"Return Logistics Form\",\r\n      \"type\": \"array\",\r\n      \"items\": {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"warehouse\": {\r\n            \"title\": \"Destinating Warehouse\",\r\n            \"type\": \"string\",\r\n            \"enum\": [\r\n              \"Warehouse Logistics Net Asia\",\r\n              \"Yusen Logistics Singapore Pte Ltd\", \r\n              \"CWT Globelink Warehouse\",\r\n              \"CoGri Asia Pacific Pte Ltd\",\r\n              \"DAP Asia Pacific (S) Pte Ltd\",\r\n              \"Atlas Ice Warehouse\",\r\n              \"Guan Hua Warehouse Building\",\r\n              \"iHub Solutions Pte Ltd\"\r\n            ]\r\n          },\r\n          \"returnList\": {\r\n            \"title\": \"Products to be Returned\",\r\n            \"type\": \"array\",\r\n            \"items\": {\r\n              \"type\": \"object\",\r\n              \"properties\": {\r\n                \"productItem\": {\r\n                  \"type\": \"object\",\r\n                  \"enum\": [\r\n                    { \"value\": '8000001289', \"label\": 'ALMOND WHITE CHOC' },\r\n                    { \"value\": '8000001288', \"label\": 'BERRY MOCHI MOCHI' },\r\n                    { \"value\": '8000001287', \"label\": 'BLACK FOREST - VEGAN+NUTS' },\r\n                    { \"value\": '8000001286', \"label\": 'CHOC FROSTED (GSL)' },\r\n                    { \"value\": '8000001285', \"label\": 'CHOCO MOCHIMOCHI' },\r\n                    { \"value\": '8000001284', \"label\": 'CHOCO-NUT SWIRL' },\r\n                    { \"value\": '8000001283', \"label\": 'CINNAMON - GSL' },\r\n                    { \"value\": '8000001282', \"label\": 'CINNAMON ROLL, 2019' },\r\n                    { \"value\": '8000001281', \"label\": 'MUNCHKIN, WHITE CHOCO W RAINBOW DRIZZLE' },\r\n                    { \"value\": '8000001280', \"label\": 'COOKIES & CREAM' },\r\n                    { \"value\": '8000003301', \"label\": 'MUNCHKIN, GLAZED W CHOCO RICE' },\r\n                    { \"value\": '8000003302', \"label\": 'MATCHA GREEN TEA' },\r\n                    { \"value\": '8000003303', \"label\": 'NUTTY CHOC - L34 - GSL' },\r\n                    { \"value\": '8000003304', \"label\": 'SALTED CARAMEL CHOC' },\r\n                    { \"value\": '8000003305', \"label\": 'STRAWBERRY FROSTED' },\r\n                    { \"value\": '8000003306', \"label\": 'SUGAR RAISED - L34 - ORANGE' },\r\n                    { \"value\": '8000003307', \"label\": 'WHITE CHOC - JUNIOR SALTY' },\r\n                    { \"value\": '8000003308', \"label\": 'CHOCO PEANUT CAKE' },\r\n                    { \"value\": '8000003309', \"label\": 'BOUBLE CHOC CAKE' },\r\n                  ]\r\n                },\r\n                \"productQuantity\": {\r\n                  \"type\": \"number\"\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport default jsonSchema;","const uiSchema = {\r\n  \"returnForm\": {\r\n    \"ui:options\": {\r\n      \"orderable\": false\r\n    },\r\n    \"items\": {\r\n      \"returnList\": {\r\n        \"ui:options\": {\r\n          \"orderable\": false\r\n        },\r\n        \"items\": {\r\n          \"ui:field\": \"selectProduct\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default uiSchema;","import React from 'react';\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport Form from \"react-jsonschema-form\";\r\n\r\nimport jsonSchema from \"./jsonschema\";\r\nimport uiSchema from \"./uischema\";\r\n\r\nconst ReturnArray = class ReturnArray extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      formData: props.formData\r\n    };\r\n    this.options = props.schema.properties.productItem.enum;\r\n    this.handleProduct = this.handleProduct.bind(this);\r\n    this.handleQuantity = this.handleQuantity.bind(this);\r\n    console.log('Props', props);\r\n  }\r\n\r\n  handleProduct(event) {\r\n    const stateQuantity = this.state.formData.productQuantity;\r\n    const value = event.__isNew__ ? '000' : event.value;\r\n    this.setState({ formData: { productItem: { value, label: event.label }, productQuantity: stateQuantity } }, () => this.props.onChange(this.state.formData))\r\n  }\r\n\r\n  handleQuantity(event) {\r\n    const stateItem = this.state.formData.productItem;\r\n    this.setState({ formData: { productItem: stateItem, productQuantity: parseInt(event.target.value) } }, () => this.props.onChange(this.state.formData))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-9\"><CreatableSelect defaultValue={this.state.formData.productItem} options={this.options} onChange={this.handleProduct} /></div>\r\n        <div className=\"col-sm-3\" style={{paddingLeft: '0', paddingTop: '2px'}}>\r\n    \t  <div className=\"form-group\">\r\n    \t    <input className=\"form-control\" type='number' placeholder='Qty' value={this.state.formData.productQuantity || ''} onChange={this.handleQuantity} />\r\n    \t  </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst App = class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.state = {\r\n      \"formContext\": {},\r\n      \"formData\": {\r\n        \"metaData\": {\r\n          \"created\": new Date().toISOString()\r\n        },\r\n        \"returnForm\": [\r\n          {\r\n            \"warehouse\": '',\r\n            \"returnList\": [\r\n              {\r\n                \"productItem\": {\r\n                  \"value\": '',\r\n                  \"label\": ''\r\n                },\r\n                \"productQuantity\": null\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    };\r\n    this.fields = { selectProduct: ReturnArray };\r\n  };\r\n\r\n  handleChange({ formData }) {\r\n    this.setState({ formData: Object.assign({}, formData) });\r\n  }\r\n\r\n  handleSubmit({ formData }) {\r\n    console.log(formData);\r\n  }\r\n\r\n  render() {\r\n    console.log('this is process.env.PUBLIC_URL', process.env.PUBLIC_URL);\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-5\">\r\n            <h3>formData</h3>\r\n            <p>This is the formData that the app will generate onSubmit</p>\r\n            <pre>{JSON.stringify(this.state.formData, undefined, 2, 2)}</pre>\r\n          </div>\r\n          <div className=\"col-sm-7\">\r\n            <Form\r\n              safeRenderCompletion={true}\r\n              formData={this.state.formData}\r\n              formContext={this.state.formContext}\r\n              schema={jsonSchema}\r\n              uiSchema={uiSchema}\r\n              fields={this.fields}\r\n              onChange={this.handleChange}\r\n              onSubmit={this.handleSubmit}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { Route } from 'react-router';\r\n\r\nReactDOM.render(\r\n\t<Router basename={process.env.PUBLIC_URL}>\r\n\t\t<Route exact path={`/`} render={ (routerProps) => <App routerProps={routerProps}/>}/>\r\n\t</Router>,\r\n document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}